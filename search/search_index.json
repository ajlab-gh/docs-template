{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"docs-template","text":"<p>Welcome!</p> <p>This MkDocs project uses GitHub Actions to automate the build and deployment of our documentation. Here's an overview of the workflow:</p> <p>Workflow:</p> <p>Our workflow consists of five stages:</p> <ol> <li>Checkout Repository: The latest version of our repository is checked out using the <code>actions/checkout</code> action.</li> <li>Configure GitHub Pages: This stage sets up GitHub Pages to deploy our documentation.</li> <li>Install Python and MkDocs software: Python 3.x is installed, followed by a list of MkDocs plugins required for building and deploying our documentation.</li> <li>Build Docs: The <code>mkdocs gh-deploy</code> command is run to build and deploy our documentation to GitHub Pages.</li> <li>Triggering the workflow: The workflow is triggered automatically whenever changes are pushed to the <code>main</code> branch or when a pull request is created. This ensures that our documentation is always up-to-date and reflects the latest changes in our codebase.</li> </ol> <p>Concurrent builds: To ensure that only one build is running at a time, we use GitHub Actions' concurrency feature. If multiple pushes occur simultaneously, the workflow will wait for the previous build to complete before starting a new one.</p> <p>Permissions: The workflow has write permissions to the <code>contents</code>, <code>pages</code>, and <code>id-token</code> of our repository, allowing it to create and update files as needed.</p> <p>By using GitHub Actions to automate our documentation build and deployment process, we can ensure that our documentation is always up-to-date, reliable, and easily accessible.</p> <pre><code>pre-commit install\n</code></pre>"}]}